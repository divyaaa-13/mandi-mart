<header class="container__nav-bar ">
  <div class="main__nav-bar color-{{ section.settings.color_scheme }}">
    <a class="menu-drawer-btn">{% render 'icon-hamburger' %}</a>
    <a href="/" class="header__logo">
      <img src="{{ section.settings.brand_logo |  img_url: 'medium' }}" alt="{{ site.name }}">
    </a>

    <div class="search-bar desktop">
      <form action="{{ routes.search_url }}">
        <input
          class="search-box"
          type="text"
          name="q"
          value="{{ search.terms |  escape }}"
          placeholder="Explore 1000+ supplements">
        <button
          class="search-btn"
          value="Search"
          type="submit">{% render 'icon-search' %}</button>
      </form>
    </div>

    <ul class="header-nav">
      {% for link in section.settings.navigation.links %}
        <li class="nav-link">
          <a href="{{ link.url }}" class="poppins-medium">{{ link.title }}</a>
        </li>
      {% endfor %}
    </ul>

    <div class="container__mobile-icon">
      <a class="mobile-search-icon">{% render 'icon-search' %}</a>

      {%- if shop.customer_accounts_enabled -%}
        <a href="{%- if customer -%}{{ routes.account_url }}{%- else -%}{{ routes.account_login_url }}{%- endif -%}" class="icon-account">
          {% render 'icon-account' %}
        </a>
      {%- endif -%}
      <a href="{{ routes.cart_url }}" class="icon-cart">
        {% render 'icon-new-cart' %}
      </a>
    </div>
  </div>
  {% if section.settings.mega_navbar != blank %}
    <div class="mega-menu__nav-bar color-{{ section.settings.menu_color_scheme }}">

      <ul class="mega-menu__nav nav-disable">
        <div class="search-bar mobile">
          <form action="{{ routes.search_url }}">
            <input
              class="search-box"
              type="text"
              name="q"
              value="{{ search.terms |  escape }}"
              placeholder="Explore 1000+ supplements">
            <button
              class="search-btn"
              value="Search"
              type="submit">{% render 'icon-search' %}</button>
          </form>
        </div>
        {%  assign counter = 0 %}
        {% for link in section.settings.mega_navbar.links %}
          {% assign collection_handle = link.url | remove: '/collections/' %}
          {% assign collection = collections[collection_handle] %}
          {% assign counter = counter | plus: 1 %} 
          <li class="mega__nav-link {% if link.links != blank %} dropdown {% endif %}">
            <a href="{{ link.url }}" class="first-dropdown">
              {% if collection.image != blank %}
                <img src="{{ collection.image | img_url: 'medium'}}" class="collection__featured-image">
              {% endif %}
              {{ link.title }}
              {% if link.links != blank %}
                {% render 'icon-arrow-down' %}
              {% endif %}
            </a>

            {% if link.links != blank %}
              <div class="mega-menu__sub  nav-hidden">
              <ul>
                {%  assign dropdownDividerMobile = 0 %}
                {% assign dropdownDividerDesktop = 0 %} 
                {% for child in link.links %}
                  {% assign child_collection_handle = child.url | remove: '/collections/' %}
                  {% assign child_collection = collections[child_collection_handle] %}
                <li class="mega-menu__sub-item {% if child.links != blank %} sub-child-dropdown {% endif %}" {% if child_collection %}data-collection-handle="{{ child_collection_handle }}" {% endif %}>
                    <a href="{{ child.url }}" class="poppins-medium">
                      {% if child_collection.image != blank %}
                        <img src="{{ child_collection.image | img_url: 'medium'}}" class="collection-brand__featured-image">
                      {% endif %}
                      {{ child.title }}
                    </a>
                    {% if child.url != '#' %}
                      <div class="product-preview"></div>
                    {% endif %}
                    {% if child.links != blank %}
                      <ul class="mega-menu__sub-child sub-child-hidden ">
                        {% for childTwo in child.links %}
                          <li class="mega-menu__sub-child-item">
                            <a href="{{ childTwo.url }}">{{ childTwo.title }}</a>
                          </li>
                        {% endfor %}
                      </ul>
                    {% endif %}
                  </li>
                  {%  assign dropdownDividerMobile = dropdownDividerMobile |  plus: 1 %} 
                  {% assign dropdownDividerDesktop = dropdownDividerDesktop | plus: 1 %}
                  {% if dropdownDividerDesktop == 16 %} 
                    <div class="dropdown-divider-desktop"></div>
                  {% endif %}
                  {% if dropdownDividerMobile == 4 or dropdownDividerMobile == 8 or dropdownDividerMobile == 12 or dropdownDividerMobile == 16 or dropdownDividerMobile == 20 or dropdownDividerMobile == 24 %}
                    <div class="dropdown-divider-mobile"></div>
                  {% endif %}
                {% endfor %}
                <!-- Container for the preview products -->
                <div id="product-preview-container">
                     <!-- Initial products will be inserted here via JavaScript -->
                </div>
              </ul>
              </div>
            {% endif %}
          </li>
          {% if counter == 1 %}
            <div class="mega-menu__divider"></div>
          {% endif %}
        {% endfor %}
      </ul>
    </div>
  {% endif %}
  <div class="header-class__overlay"></div>
</header>


<style>

  .container__nav-bar {
    border-bottom: 1px solid #c7c7c7;
  }

  #product-preview-container {
    background: #F3F7F7;
    width: 250px;
    /* height: 516px; */
    position: absolute;
    right: 0px;
    top: 0px;
    z-index: 100;
  }

  
  #product-preview-container:empty {
    display: none;
  }
  
  .mega__nav-link.dropdown:hover #product-preview-container {
    display: block;
  }

  
  .main__nav-bar {
    /* height: 85px; */
    display: flex;
    justify-content: space-around;
    align-items: center;
    padding-inline: 4rem;
    padding-block: 1rem;
  }
  .menu-drawer-btn svg {
    width: 16px;
    height: 16px;
  }

  .menu-drawer-btn svg path {
    fill: rgb(var(--color-foreground));
  }

  .header__logo {
    display: block;
  }

  .header__logo img {
    width: 190px;
  }

  .menu-drawer-btn {
    display: none;
  }

  .header-nav {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 20px
  }

  .search-bar form {
    display: flex;
  }

  .mobile {
    display: none;
  }


  .search-box {
    height: 45px;
    border: none;
    border-radius: 4px 0 0 4px;
    padding-left: 1rem;
    width: 350px;
  }

  .search-box:focus {
    border: none;
    outline: none;
    appearance: none;
  }


  .search-btn {
    width: 45px;
    height: 45px;
    background-color: #cfe8e7;
    border: 1px solid #cfe8e7;
    border-radius: 0 4px 4px 0;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .search-btn:hover {
    cursor: pointer;
  }

  .container__mobile-icon {
    display: none;
  }

  .nav-link a {
    text-decoration: none;
    color: rgb(var(--color-foreground));
  }

  .nav-link {
    list-style: none;
  }

  .mega-menu__nav-bar {
    max-width: 1920px;
    width: 90vw;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    margin: auto;

  }

  .mega-menu__nav {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    height: 70px;
    padding-inline: 2rem;
    gap: 4rem;
    align-items: center;
  }


  .mega__nav-link a {
    text-decoration: none;
    font-weight: 500;
    font-size: 18px;
    color: rgb(var(--color-foreground));
  }

  .mega__nav-link {
    list-style: none;
    position: static;
  }

  .mega__nav-link svg {
    width: 12px;
    height: 12px;
  }

  .mega-menu__divider {
    border: 1px solid rgb(var(--color-foreground));
    height: 24px;
    display: inline-block !important;
    margin-inline: 4rem;
  }

  .mega__nav-link svg path {
    color: rgb(var(--color-foreground));
  }


  /*
   .mega-menu__sub {
   position: absolute;
   top: 0;
   margin-top: 8rem;
   transform: translate(-50%);
   background-color: rgb(var(--color-background));
   width: 800px;
   left: -9999px;
   opacity: 0;
   transition: left 0s 0.4s
   , opacity 0.4s;
   }
*/

  .mega-menu__sub {
    position: absolute;
    width: 1920px;
    max-width: 90vw;
    background-color: rgb(var(--color-background));
    margin-top: 6rem;
    left: 0;

    /* opacity: 0; */
  }
  .mega-menu__sub ul {
    padding: 0;
    gap: 1rem;
    margin: 2rem;
  }

  /* .dropdown-divider-desktop {
      display: inline-block !important;
      width: 100%;
      border: 1px solid #DADADA;
    } */

    .dropdown-divider-mobile {
      display: none !important;  
    }

  .mega-menu__sub ul:has(> :nth-child(5)) {
    column-count: 3;
    height: 476px;
    /* flex-direction: row;
    display: flex; */
  }


  li.mega-menu__sub-item a {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 1rem;
  }


  /*
   .mega__nav-link:hover .mega-menu__sub {
   left: 50%;
   opacity: 1;
   transition: left 0s
   , opacity 0.4s;
   }
*/


  /*
   .mega__nav-link:hover .mega-menu__sub {
   display: block;
   }
*/.mega-menu__sub-active {
    display: block;
  }


  .mega-menu__sub-item {
    list-style: none;
  }

  .mega-menu__sub-child {
    column-count: 3;


    /*
   display: grid;
   grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
   grid-auto-flow: column;
   grid-auto-rows: auto;
   gap: 10px;
   max-height: calc(18 * 50px + 17 * 10px);
   overflow-y: auto;
*/
  }

  .sub-child-hidden {
    display: none;
  }

  .sub-child-active {
    display: block;
  }

  .product-preview-container {
    /* display: none; */
    position: absolute;
    /* top: 0;
    right: 0; */
    /* width: 250px; Adjust width as needed */
    background-color: #F3F7F7;
    padding: 10px;
    z-index: 1000;
    padding: 2rem 1rem;
    text-align: center;
    font-size: 1.4rem;
  }

  .product-item {
    margin-top: 2rem;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

  }

  .mega-menu__product-card-container {
    display: flex;
    background-color: white;
    border-radius: .4rem;
    overflow: hidden;
    width: 210px;
  }

  .product-preview-container p {
    padding: 0;
    margin: 0;
  }

  .mega-menu__product-title {
    font-size: 1.6rem;
    font-weight: 600;
    text-align: center;
    margin-block: 0;
  }

  .mega-menu__product-img-wrapper {
    display: flex;
    justify-content: centera;
    align-items: center;
    width: 109px;
    height: 115px;
  }

  .mega-menu__product-image {
    height: 115px;
    width: 109px;
    object-fit: contain;
    
  }

  .mega-menu__product-card-info {
    text-align: left;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    padding: 2rem;
  }

  .mega-menu__product-card-info p {
    margin: 0;
  }

  .mega-menu__product-price {
    color: #228B85;
    font-weight: 600;
    margin: 0;
  }

  .product-item a {
    background-color: #228B85;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: .6rem;
    border-radius: 2rem;
    font-weight: 600;
    font-size: 1.6rem;
    width: 90%;
  }

  .mega-menu__atc-btn:hover {
    color: #228B85;
    background-color: white;
    border: 2px solid #228B85;
  }

  /* .mega-menu__sub-item:hover .product-preview {
    display: block;
  } */

  .mega-menu__sub-child-item {
    list-style: none;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }

  .mobile-search-icon svg g path {
    fill: rgb(var(--color-foreground));
  }

  .icon-cart svg {
    width: 20px;
    height: 20px;
  }
  .icon-account svg {
    width: 20px;
    height: 20px;

  }

  .icon-account svg path,
  .icon-cart svg path {
    fill: rgb(var(--color-foreground))
  }

  .collection__featured-image {
    width: 50px;
    display: none;
  }

  .collection-brand__featured-image {
    width: 65px;
  }

  .mega-menu__sub.nav-hidden {
    display: none;
  }

  .mega-menu__sub.nav-active {
    display: block;
  }


   @media (min-width: 896px) and (max-width: 1440px) {

   .mega-menu__sub ul:has(> :nth-child(5)) {
    column-count: 2;
    
    /* flex-direction: row;
    display: flex; */
  }
    /* .mega-menu__sub {
      max-width: 70vw;
    }

    .product-preview {
      left: 100%;
    } */

  } 

  @media screen and (max-width: 896px) {

    .search-box {
      width: 250px;
    }

    .main__nav-bar {
      justify-content: space-between;
    }

    .header-nav {
      display: none;
    }

    .header__logo img {
      width: 150px;
    }

    .container__mobile-icon {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
      gap: 1rem;

    }
    .header__logo {
      display: block;
      /* transform: translateX(-5rem); */
    }
    .mega-menu__nav {
      position: fixed;
      top: 0;
      left: 0;
      height: 100%;
      overflow: auto;
      width: 90%;
      flex-direction: column;
      justify-content: flex-start;
      padding-top: 2rem;
      background-color: rgb(var(--color-background));
      z-index: 10;
      /* transform: translateX(-100%); */
      transition: 0.4s transform;
      gap: 2rem;
    }

    .mega-menu__divider {
      display: none !important;
    }
    .desktop {
      display: none;
    }

    .dropdown-divider-mobile {
      display: inline-block !important;
      width: 90%;
      border: 1px solid #DADADA;
      left: -10px;
      position: relative;
    }

    .mega-menu__sub ul:has(> :nth-child(5)) {
    height: auto;
    /* flex-direction: row;
    display: flex; */
  }

  .mega__nav-link.dropdown:hover #product-preview-container {
    display: none;
}

    #product-preview-container {
      display: none;
    }

    .mega__nav-link {
      border-bottom: 1px solid rgba(0, 0, 0, 0.1);
      width: 100%;
      text-align: center;
      padding-bottom: 2rem;
    }

    .mega__nav-link a {
      display: flex;
      gap: 1rem;
      align-items: center;
      margin-left: 1rem;
    }

    .dropdown .first-dropdown {
      justify-content: space-between;
    }

    .mega__nav-link svg {
      width: 26px;
      height: 26px;
      border-radius: 50%;
      padding: 0.5rem;
      background: #074542;
    }

    .mega__nav-link svg path {
      fill: rgb(var(--color-background));
    }

    .mega-menu__sub {
      position: relative;
      margin-top: 0;
      left: 0;
      transform: translate(0);
    }

    .mega-menu__sub ul:has(> :nth-child(5)) {
      column-count: 1;
    }

    .mega-menu__sub-child {
      column-count: 1;
    }

    .header-class__overlay {
      position: fixed;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      z-index: 9;
    }

    .overlay-add {
      display: block !important;
    }

    .nav-disable {
      transform: translateX(-100%);
    }

    .menu-drawer-btn {
      display: block;
    }
    .mobile {
      display: inline;
      padding-top: 5rem;
    }

    .collection__featured-image {
      display: inline-block;
    }

    .mega-menu__sub-item:hover .product-preview {
    display: none;
  }


  }

</style>

<script>
  
  document.addEventListener('DOMContentLoaded', function() {
    const menuDrawerBtn = document.querySelector('.menu-drawer-btn');
    const megaMenuNav = document.querySelector('.mega-menu__nav');
    const headerOverlay = document.querySelector('.header-class__overlay');
    const mobileSearchIcon = document.querySelector('.mobile-search-icon');
    const dropdownLinks = document.querySelectorAll('.dropdown');
    const subChildDropdown = document.querySelectorAll('.sub-child-dropdown');
    const dropdownItems = document.querySelectorAll('.mega-menu__sub-item');


// Function to fetch products and update the preview container
function fetchProducts(collectionHandle, container) {
  fetch(`/collections/${collectionHandle}/products.json`)
    .then(response => response.json())
    .then(data => {
      const randomProducts = getRandomProducts(data.products, 2); // Get 2 random products
      container.innerHTML = ''; // Clear previous content
      randomProducts.forEach(product => {
        const productElement = createProductElement(product);
        container.appendChild(productElement);
      });
    })
    .catch(error => console.log('Error fetching products:', error));
}

function getRandomProducts(products, count) {
  const shuffled = [...products].sort(() => 0.5 - Math.random()); // Shuffle array
  return shuffled.slice(0, count); // Return the specified number of products
}


// Function to create the product element
function createProductElement(product) {
  const productElement = document.createElement('div');
  productElement.classList.add('product-item');
  productElement.innerHTML = `
    <p class="mega-menu__product-title">${product.title}</p>
    <div class="mega-menu__product-card-container">
      <div class="mega-menu__product-card-info">
        <p>${product.vendor}</p>
        <p class="mega-menu__product-price">$${product.variants[0].price}</p>
      </div>
      <div class="mega-menu__product-img-wrapper">
      <img src="${product.images[0].src}" alt="${product.title}" class="mega-menu__product-image"/>
      </div>
      </div>
    <a class="mega-menu__atc-btn" href="#" data-variant-id="${product.variants[0].id}">+ ADD TO CART</a>
  `;

  const addToCartButton = productElement.querySelector('.mega-menu__atc-btn');
  addToCartButton.addEventListener('click', function() {
    const variantId = this.getAttribute('data-variant-id');
    addToCart(variantId);
  });


  return productElement;
}

function addToCart(variantId) {
  fetch('/cart/add.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest',
    },
    body: JSON.stringify({
      id: variantId,
      quantity: 1,
    }),
  })
    .then(response => response.json())
    .then(data => {
      console.log('Product added to cart:', data);
      // You can add a notification or update the cart UI here
    })
    .catch(error => console.log('Error adding product to cart:', error));
    
}

// Initial load: Display products from the first collection in the first dropdown
const firstDropdownItem = dropdownItems[0];
if (firstDropdownItem) {
  const firstCollectionHandle = firstDropdownItem.getAttribute('data-collection-handle');
  const productPreviewContainer = document.getElementById('product-preview-container');
  fetchProducts(firstCollectionHandle, productPreviewContainer);
}

// Update the preview container on hover
dropdownItems.forEach(function(item) {
  item.addEventListener('mouseenter', function() {
    const collectionHandle = item.getAttribute('data-collection-handle');
    const productPreviewContainer = document.getElementById('product-preview-container');
    fetchProducts(collectionHandle, productPreviewContainer);
  });
});


  
    document.querySelectorAll('.sub-child-dropdown').forEach(function(dropdown) {
      dropdown.addEventListener('click', function(event) {
        event.stopPropagation();
        const megaMenuSubChild = dropdown.querySelector('.mega-menu__sub-child');
        megaMenuSubChild.classList.toggle('sub-child-hidden');
        megaMenuSubChild.classList.toggle('sub-child-active');
      });

      document.querySelectorAll('.mega-menu__sub-child').forEach(function(menu) {
       menu.addEventListener('click', function(event) {
        event.stopPropagation();
       });
     });

    });


  

  dropdownLinks.forEach(function(dropdown) {
    dropdown.addEventListener('click', function(event) {
      event.stopPropagation();
      const megaMenuItem = dropdown.querySelector('.mega-menu__sub');
      megaMenuItem.classList.toggle('nav-hidden');
      megaMenuItem.classList.toggle('nav-active');
    });
  });

  
  document.addEventListener('click', function(event) {
    dropdownLinks.forEach(function(dropdown) {
      const megaMenuItem = dropdown.querySelector('.mega-menu__sub');
      if (!dropdown.contains(event.target)) {
        megaMenuItem.classList.add('nav-hidden');
        megaMenuItem.classList.remove('nav-active');
      }
    });

    document.querySelectorAll('.mega-menu__sub-child').forEach(function(menu) {
      if (!menu.contains(event.target)) {
        menu.classList.add('sub-child-hidden');
        menu.classList.remove('sub-child-active');
      }
    });
  });

  if (menuDrawerBtn && megaMenuNav && headerOverlay) {
    menuDrawerBtn.addEventListener('click', function() {
      megaMenuNav.classList.toggle('nav-disable');
      console.log('text1');
      headerOverlay.classList.toggle('overlay-add');
      console.log('clicked');
    });

    headerOverlay.addEventListener('click', function() {
      console.log('test2');
      megaMenuNav.classList.toggle('nav-disable');
      console.log('clicked');
      headerOverlay.classList.toggle('overlay-add');
    });

    if (mobileSearchIcon) {
      mobileSearchIcon.addEventListener('click', function() {
        megaMenuNav.classList.toggle('nav-disable');
        headerOverlay.classList.toggle('overlay-add');
        console.log('clicked');
      });
    } else {
      console.error('Mobile search icon not found');
    }
  } else {
    console.error('Menu drawer button, mega menu nav, or header overlay not found');
  }
  });
</script>

{% schema %}
  {
    "name": "Header",
    "class": "section-header",
    "settings": [
      {
        "type": "image_picker",
        "id": "brand_logo",
        "label": "Header Logo"
      },
      {
        "type": "range",
        "id": "logo_width",
        "label": "Logo Width",
        "default": 100,
        "min": 20,
        "max": 300,
        "step": 5
      },
      {
        "type": "link_list",
        "id": "navigation",
        "label": "Navigation Menu",
        "default": "main-menu"
      },
      {
        "type": "link_list",
        "id": "mega_navbar",
        "label": "Mega Menu"
      }, {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:sections.all.colors.label",
        "default": "scheme-1"
      }, {
        "type": "color_scheme",
        "id": "menu_color_scheme",
        "label": "t:sections.header.settings.menu_color_scheme.label",
        "default": "scheme-1"
      }
    ]
  }
{% endschema %}